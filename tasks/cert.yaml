---

- set_fact: letsencrypt_certbot_args="{{letsencrypt_certbot_args + ['--renew-by-default']}}"
  when: letsencrypt_force_renew == true

- set_fact: letsencrypt_certbot_args="{{letsencrypt_certbot_args + ['--keep-until-expiring']}}"
  when: letsencrypt_force_renew != true

- set_fact: letsencrypt_domain="{{letsencrypt_domain}},www.{{letsencrypt_domain}}"
  when: letsencrypt_request_www

- name: Stopping Services
  service: name="{{item}}" state=stopped
  with_items: "{{ letsencrypt_pause_services }}"

- name: Obtain or renew cert for domain
  shell: ./certbot-auto certonly -t -m {{ letsencrypt_email }} --domains {{ letsencrypt_domain }} --agree-tos --standalone --expand {{letsencrypt_certbot_args | join(' ')}} 2>&1
  args:
    chdir: /opt/certbot
    executable: /bin/bash
  ignore_errors: true
  register: _certbot_command

- set_fact: _signing_successful='{{ certbot_success_message in _certbot_command.stdout }}'
- set_fact: _signing_skipped='{{ (letsencrypt_force_renew != true) and (certbot_skip_renewal_message in _certbot_command.stdout) }}'

- debug: msg="{{ (_certbot_command.stdout_lines if _certbot_command.stdout_lines is defined else _certbot_command.stderr_lines) | pprint }}"
  when: (_signing_successful == false) and (_signing_skipped == false)

- name: Starting Services
  service: name="{{item}}" state=started
  with_items: "{{ letsencrypt_pause_services }}"

- fail: msg="Error signing the certificate"
  when: (_signing_successful == false) and (_signing_skipped == false)
